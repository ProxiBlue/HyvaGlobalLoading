<?php

/*
 * MIT License
 *
 * Copyright (c) [2025] [Lucas van Staden (ProxiBlue)]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

declare(strict_types=1);

use Magento\Framework\View\Element\Template;

/** @var Template $block */
?>
<script>
    'use strict';

    /**
     * Initializes the global `isLoading` property in the `window` object,
     * allowing it to emit events when its value changes.
     */
    (function defineIsLoadingProperty() {
        let isLoadingValue = false;

        Object.defineProperty(window, 'isLoading', {
            get() {
                return isLoadingValue;
            },
            set(value) {
                if (value !== isLoadingValue) { // Prevent redundant events
                    isLoadingValue = value;
                    window.dispatchEvent(new CustomEvent('isLoadingChanged', { detail: value }));
                }
            }
        });
    })();

    /**
     * Initializes the loader display logic and overrides common functions
     * to manage the `isLoading` state.
     */
    function initLoaderDisplay() {
        return {
            isLoading: false,

            init() {
                // Handle `isLoading` state changes from the `window` object.
                window.addEventListener('isLoadingChanged', (event) => {
                    this.isLoading = event.detail;
                });

                this.overrideFormSubmit();
                this.overrideFetch();

                // Add a global form submit listener to handle form submissions.
                document.addEventListener(
                    'submit',
                    this.handleFormSubmit,
                    true // Set this to capture events in the capturing phase.
                );
            },

            /**
             * Overrides the HTMLFormElement prototype's `submit` method
             * to ensure consistent handling of form submissions.
             */
            overrideFormSubmit() {
                const nativeSubmit = HTMLFormElement.prototype.submit;

                HTMLFormElement.prototype.submit = function () {
                    // Trigger a "submit" event before calling the native submit method.
                    const event = new Event('submit', { bubbles: true, cancelable: true });
                    const canceled = !this.dispatchEvent(event);

                    // Call the original `submit` method only if the event wasn't canceled.
                    if (!canceled) {
                        nativeSubmit.call(this);
                    }
                };
            },

            /**
             * Event handler for the global "submit" event to set the `isLoading` property.
             * This will trigger when any form is submitted.
             */
            handleFormSubmit(event) {
                const form = event.target;

                if (form.tagName === 'FORM') {
                    window.isLoading = true; // Indicate that the form is being submitted.
                }
            },

            /**
             * Overrides the global `fetch` function to track AJAX requests
             * and manage the `isLoading` state accordingly.
             * Is loading is not enabled on ajax stat, as that will block user from using the
             * site whilst background ajax works, but, a form could initiate an ajax request, fail, and be stuck
             * on loader. This ensures loader is always disabled when ajax fails or completes
             */
            overrideFetch() {
                const originalFetch = window.fetch;

                window.fetch = async function (...args) {
                    try {
                        return await originalFetch.apply(this, args);
                    } catch (error) {
                        throw error;
                    } finally {
                        window.isLoading = false;
                    }
                };
            },
        };
    }
</script>

<div id="global_loader" x-data="initLoaderDisplay()">
    <?= $block->getChildHtml('ui_loader') ?>
</div>
